package hai.payment.dynamodb_access;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.services.dynamodbv2.document.DeleteItemOutcome;
import com.amazonaws.services.dynamodbv2.document.DynamoDB;
import com.amazonaws.services.dynamodbv2.document.Item;
import com.amazonaws.services.dynamodbv2.document.Table;
import com.amazonaws.services.dynamodbv2.document.spec.DeleteItemSpec;
import com.amazonaws.services.dynamodbv2.document.utils.NameMap;
import com.amazonaws.services.dynamodbv2.document.utils.ValueMap;
import com.amazonaws.services.dynamodbv2.model.ReturnValue;

import hai.payment.common.DynamoUtil;
import hai.payment.model.PaymentPto;

public class PaymentRepository {
	DynamoDB dynamoDB;
	AWSCredentials credentials = null;
	static String _tableName = "Payment";
	void init()
	{
		try {
			credentials = new ProfileCredentialsProvider().getCredentials();
			AmazonDynamoDBClient client = new AmazonDynamoDBClient();
			client.withEndpoint("http://localhost:8000"); 	
			dynamoDB = new DynamoDB(client);

		} catch (Exception e) {
			System.err.println("Program failed:");
			System.err.println(e.getMessage());
		}
		
	}
	public void createTable()
	{

		try {
			init();
			DynamoUtil u =  new DynamoUtil(dynamoDB); 
			u.createTable(_tableName,10L, 5L, "userId", "N","paidDatetime","S");

		} catch (Exception e) {
			System.err.println("Program failed:");
			System.err.println(e.getMessage());
		}
	}
	public void insertItem(PaymentPto paymentPto )
	{
		Table table = dynamoDB.getTable(_tableName);
		try {
			DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
			Date date = new Date();
			
			Item item = new Item()
					.withPrimaryKey("userId", 101,"paidDatetime", )
					.withString("Title", "Book 101 Title")
					.withString("ISBN", "111-1111111111")
					.withStringSet("Authors", new HashSet<String>(
							Arrays.asList("Author1")))
					.withNumber("Price", 2)
					.withString("Dimensions", "8.5 x 11.0 x 0.5")
					.withNumber("PageCount", 500)
					.withBoolean("InPublication", true)
					.withString("ProductCategory", "Book");
			table.putItem(item);
			
		} catch (Exception e) {
			System.err.println("Failed to create item in " + _tableName);
			System.err.println(e.getMessage());
		}
		
	}
	public  void getAll()
	{
		
		
	}
}
